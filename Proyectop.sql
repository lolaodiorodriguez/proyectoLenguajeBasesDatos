SET SERVEROUTPUT ON;

CREATE TABLE hotel(
    id_hotel INT PRIMARY KEY,
    nombre VARCHAR2(50),
    direccion VARCHAR2(100),
    telefono VARCHAR2(20)
);

CREATE TABLE Restaurante (
    id_restaurante INT PRIMARY KEY, 
    nombre VARCHAR(100) NOT NULL,                  
    tipo_cocina VARCHAR(50) NOT NULL,             
    capacidad INT NOT NULL,                                      
    id_hotel INT NOT NULL,                         
    FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel)
);    

CREATE TABLE proveedor (
    id_proveedor INT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    telefono VARCHAR(15),
    direccion VARCHAR(255),
    email VARCHAR(100),
    id_hotel INT,
    FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel)
);

CREATE TABLE suministro (
    id_suministro INT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion VARCHAR(255),
    cantidad INT CHECK (cantidad >= 0),
    precio_unitario DECIMAL(10, 2),
    id_proveedor INT,
    id_hotel INT,
    FOREIGN KEY (id_proveedor) REFERENCES proveedor(id_proveedor),
    FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel)
);


CREATE TABLE cliente (
    id_cliente INT PRIMARY KEY,
    nombre VARCHAR(50),
    apellido1 VARCHAR(50),
    apellido2 VARCHAR(50),
    email VARCHAR(100),
    telefono VARCHAR(15),
    direccion VARCHAR(255)
);

CREATE TABLE habitacion (
    id_habitacion INT PRIMARY KEY,
    tipo_habitacion VARCHAR(50),
    precio DECIMAL(10, 2),
    capacidad INT,
   disponibilidad NUMBER(1) -- 0 para no disponible, 1 para disponible
);

CREATE TABLE reserva (
    id_reserva INT PRIMARY KEY,
    id_cliente INT,
    id_hotel INT,
    fecha_inicio DATE,
    fecha_fin DATE,
    estado_reserva VARCHAR(50),
    id_habitacion INT,
    FOREIGN KEY (id_habitacion) REFERENCES habitacion(id_habitacion),
    FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel)
);

CREATE TABLE empleado (
    id_empleado INT PRIMARY KEY,
    id_puesto INT,
    nombre VARCHAR(50),
    apellido VARCHAR(50),
    fecha_contratacion DATE,
    FOREIGN KEY (id_puesto) REFERENCES puesto(id_puesto)
);


CREATE TABLE puesto (
    id_puesto INT PRIMARY KEY,
    salario DECIMAL(10,2),
    descripcion VARCHAR2(100)
);


CREATE TABLE servicio_adicional (
    id_servicio INT PRIMARY KEY,
    descripcion VARCHAR(255),
    fecha DATE,
    precio DECIMAL(10,2),
    id_reserva INT,
    FOREIGN KEY (id_reserva) REFERENCES reserva(id_reserva)
);

CREATE TABLE factura (
    id_factura INT PRIMARY KEY,
    id_reserva INT,
    fecha_emision DATE,
    monto_total DECIMAL(10, 2),
    FOREIGN KEY (id_reserva) REFERENCES reserva(id_reserva)
);

CREATE TABLE detalle_factura (
    id_detalle_factura INT PRIMARY KEY,
    id_factura INT,
    id_servicio INT,
    cantidad INT,
    precio_unitario DECIMAL(10,2),
    FOREIGN KEY (id_factura) REFERENCES factura(id_factura),
    FOREIGN KEY (id_servicio) REFERENCES servicio_adicional(id_servicio)
);

CREATE TABLE comentario (
    id_comentario INT PRIMARY KEY,
    id_reserva INT,
    calificacion INT,
    comentario VARCHAR(50),
    fecha_comentario DATE,
    FOREIGN KEY (id_reserva) REFERENCES reserva(id_reserva)
);

CREATE TABLE pago (
    id_pago INT PRIMARY KEY,
    id_reserva INT,
    monto DECIMAL(10, 2),
    fecha_pago DATE,
    metodo_pago VARCHAR(50),
    id_factura INT, 
    FOREIGN KEY (id_reserva) REFERENCES reserva(id_reserva)
);

--usuario
CREATE TABLE usuario (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    username VARCHAR2(50) NOT NULL UNIQUE, 
    password VARCHAR2(255) NOT NULL      
);


---------------------------  INSERCION DE LOS DATOS ----------------------------------

--HOTEL
INSERT INTO hotel 
    (id_hotel, nombre, direccion, telefono) 
VALUES (1, 'Hotel Altavista - Tarbaca', 'Tarbaca, Aserri, 200 mts', '22304941');

--Cliente 
INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
VALUES (1, 'Marco', 'Perez', 'Rodriguez', 'juan.perez@gmail.com', '25405657', 'San Rafael de Escazu');

INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
VALUES (2, 'Ana', 'López', 'Gonzales', 'ana.@gmail.com', '25407890', 'San José Centro');

INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
VALUES (3, 'Carlos', 'Martinez', 'Alvarado', 'carlos.perez@gmail.com', '25409997', 'Alajuela Centro');

INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
VALUES (4, 'Luisa', 'Ramirez', 'Rodriguez', 'luisa.perez@gmail.com', '25402345', 'Heredia');

INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
VALUES (5, 'David', 'Gonzales', 'Pineda', 'david.perez@gmail.com', '25403456', 'Cartago');


-- Habitacion
INSERT INTO habitacion (id_habitacion, tipo_habitacion, precio, capacidad, disponibilidad) 
VALUES (1, 'Suite', 150.00, 2, 1);

--Puesto 
INSERT INTO puesto (id_puesto, salario, descripcion) 
VALUES (1, 2500.00, 'Recepcionista');

INSERT INTO puesto (id_puesto, salario, descripcion) 
VALUES (2, 3000.00, 'Camarero');

INSERT INTO puesto (id_puesto, salario, descripcion) 
VALUES (3, 4500.00, 'Gerente del Hotel');

INSERT INTO puesto (id_puesto, salario, descripcion) 
VALUES (4, 3500.00, 'Chef');

INSERT INTO puesto (id_puesto, salario, descripcion) 
VALUES (5, 2000.00, 'Conserje');

--Restaurante
INSERT INTO restaurante (id_restaurante, nombre, tipo_cocina, capacidad, id_hotel) 
VALUES (1, 'Restaurante Pura vida', 'Comida Tipca de Costa Rica', 50, 1);

--Proveedor
INSERT INTO proveedor (id_proveedor, nombre, telefono, direccion, email, id_hotel) 
VALUES (1, 'Suministros Sol.', '24563512', 'San Jose, Merced, Coca cola', 'sol@suministros.com', 1);

--Suministro 
INSERT INTO suministro (id_suministro, nombre, descripcion, cantidad, precio_unitario, id_proveedor, id_hotel) 
VALUES (1, 'Sábanas', 'Sábanas de algodón 100%', 100, 4000, 1, 1);

--Empleado
INSERT INTO empleado (id_empleado, id_puesto, nombre, apellido, fecha_contratacion) 
VALUES (1, 1, 'Maria', 'Gonzalez', TO_DATE('2023-01-15', 'YYYY-MM-DD'));

INSERT INTO empleado (id_empleado, id_puesto, nombre, apellido, fecha_contratacion) 
VALUES (2, 2, 'Mario', 'Torres', TO_DATE('2023-01-16', 'YYYY-MM-DD'));

INSERT INTO empleado (id_empleado, id_puesto, nombre, apellido, fecha_contratacion) 
VALUES (3, 3, 'Fernanda', 'Calderón', TO_DATE('2023-01-18', 'YYYY-MM-DD'));

INSERT INTO empleado (id_empleado, id_puesto, nombre, apellido, fecha_contratacion) 
VALUES (4, 2, 'Cristian', 'Vega', TO_DATE('2023-01-20', 'YYYY-MM-DD'));

INSERT INTO empleado (id_empleado, id_puesto, nombre, apellido, fecha_contratacion) 
VALUES (5, 4, 'Allan', 'Robles', TO_DATE('2023-01-21', 'YYYY-MM-DD'));

--Reserva
INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion) 
VALUES (1, 1, 1, TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-05','YYYY-MM-DD'), 'Confirmada', 1);

INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion) 
VALUES (2, 2, 1, TO_DATE('2024-12-02', 'YYYY-MM-DD'), TO_DATE('2024-12-06','YYYY-MM-DD'), 'Pendiente', 1);

INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion) 
VALUES (3, 3, 1, TO_DATE('2024-12-03', 'YYYY-MM-DD'), TO_DATE('2024-12-07','YYYY-MM-DD'), 'Confirmada', 1);

INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion) 
VALUES (4, 4, 1, TO_DATE('2024-12-04', 'YYYY-MM-DD'), TO_DATE('2024-12-08','YYYY-MM-DD'), 'Cancelada', 1);

INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion) 
VALUES (5, 5, 1, TO_DATE('2024-12-05', 'YYYY-MM-DD'), TO_DATE('2024-12-09','YYYY-MM-DD'), 'Confirmada', 1);

--Factura
INSERT INTO factura (id_factura, id_reserva, fecha_emision, monto_total) 
VALUES (1, 1, TO_DATE('2024-12-01','YYYY-MM-DD'), 150000);

INSERT INTO factura (id_factura, id_reserva, fecha_emision, monto_total) 
VALUES (2, 1, TO_DATE('2024-12-02','YYYY-MM-DD'), 170000);

--Servicio Adicional
INSERT INTO servicio_adicional (id_servicio, descripcion, fecha, precio, id_reserva) 
VALUES (1, 'Spa', TO_DATE('2024-12-02', 'YYYY-MM-DD'), 10000, 1);

INSERT INTO servicio_adicional (id_servicio, descripcion, fecha, precio, id_reserva) 
VALUES (2, 'Cena', TO_DATE('2024-12-03', 'YYYY-MM-DD'), 5000, 2);

INSERT INTO servicio_adicional (id_servicio, descripcion, fecha, precio, id_reserva) 
VALUES (3, 'Masajes', TO_DATE('2024-12-04', 'YYYY-MM-DD'), 5000, 3);

INSERT INTO servicio_adicional (id_servicio, descripcion, fecha, precio, id_reserva) 
VALUES (4, 'Excursión guiada', TO_DATE('2024-12-05', 'YYYY-MM-DD'), 4000, 4);

INSERT INTO servicio_adicional (id_servicio, descripcion, fecha, precio, id_reserva) 
VALUES (5, 'Clases de Cocina', TO_DATE('2024-12-06', 'YYYY-MM-DD'), 6000, 5);

--Detalle Factura
INSERT INTO detalle_factura (id_detalle_factura, id_factura, id_servicio, cantidad, precio_unitario) 
VALUES (1, 1, 1, 1, 50);

--Comentario
INSERT INTO comentario (id_comentario, id_reserva, calificacion, comentario, fecha_comentario) 
VALUES (1,1, 5, 'Excelente servicio', TO_DATE('2024-12-06','YYYY-MM-DD'));

--Pago
INSERT INTO pago (id_pago, id_reserva, monto, fecha_pago, metodo_pago, id_factura) 
VALUES (1, 1, 160000, TO_DATE('2024-12-01','YYYY-MM-DD'), 'Tarjeta de Crédito', 1);

--SECUENCIAS
CREATE SEQUENCE pago_seq
START WITH 1  -- El valor inicial de la secuencia
INCREMENT BY 1  -- Aumenta en 1 por cada nuevo valor
NOCACHE; 


CREATE SEQUENCE factura_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE suministro_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

ALTER SEQUENCE suministro_seq INCREMENT BY 1;

CREATE SEQUENCE proveedor_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

--------------------------------------------------------------------------------------

--1er Procedimiento Almacenado (SP)

--1. Insertar un Cliente nuevo

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE agregarCliente(c_id_cliente IN INT, c_nombre IN VARCHAR2, 
c_apellido1 IN VARCHAR2, c_apellido2 IN VARCHAR2, c_email IN VARCHAR2, 
c_telefono IN VARCHAR2, c_direccion IN VARCHAR2)
AS
    v_contador INT;
BEGIN
    SELECT COUNT(*) INTO v_contador
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
    IF v_contador > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El Cliente con ID: '|| c_id_cliente || ' ya existe, cambie el valor');
    ELSE
        INSERT INTO CLIENTE(id_cliente,nombre,apellido1,apellido2,email,telefono,direccion)
        VALUES(c_id_cliente, c_nombre, c_apellido1, c_apellido2, c_email, c_telefono, c_direccion);
    
            DBMS_OUTPUT.PUT_LINE('Nuevo Cliente agregado correctamente: '|| c_nombre || ' ' || c_apellido1 || ' ' || c_apellido2);
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');
END;

--Ejecucion SP Agregar Cliente
EXEC agregarCliente(6, 'Ejemplo','Mora','Mora','Ej@gmail.com','22493041','Calle Leo, frente a Escuela G');
--Cambiar este exec para agregar cualquier cliente, si no cambia el ID, sale error
SELECT * FROM CLIENTE;
-----------------------------------------------------------------------------

--2do SP

--2. Actualizar un Cliente Existente

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE actualizarClienteExistente(c_id_cliente IN INT, c_nombre IN VARCHAR2,
c_apellido1 IN VARCHAR2, c_apellido2 IN VARCHAR2, c_email IN VARCHAR2, c_telefono IN VARCHAR2,
c_direccion IN VARCHAR2)
AS
    v_verificar INT;--verificacion del ID
BEGIN

    --Verificar el ID, si no existe salta error
    SELECT id_cliente INTO v_verificar
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
    UPDATE CLIENTE
    SET nombre = c_nombre,
    apellido1 = c_apellido1,
    apellido2 = c_apellido2,
    email = c_email,
    telefono = c_telefono,
    direccion = c_direccion
    WHERE id_cliente = c_id_cliente;
    
    DBMS_OUTPUT.PUT_LINE('Cliente actualizado correctamente: '|| c_nombre || ' ' || c_apellido1 || ' ' || c_apellido2);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error, el Cliente con ID: '|| c_id_cliente || ' no existe');
END;

--Ejecucion SP Actualizacion Cliente Existente
--En este caso se cambia el email
EXEC actualizarClienteExistente(6, 'Pedro','Robles','Lopez','ejemp@gmail.com','22493030','Calle Lopez frente a Escuela HernÃ¡ndez');

SELECT * FROM CLIENTE;
-----------------------------------------------------------------------------

--3er SP

--3. Eliminar un Cliente

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE eliminarCliente(c_id_cliente IN INT)
AS
    v_verificarE INT;--Verificar el ID para eliminar
BEGIN
    SELECT id_cliente INTO v_verificarE
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
        
    DELETE FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
        DBMS_OUTPUT.PUT_LINE('EliminaciÃ³n de Cliente correctamente, el ID es: ' || c_id_cliente);

EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');  
END;

--Ejecucion SP Eliminar Cliente
EXEC eliminarCliente(6);

SELECT * FROM CLIENTE;
-----------------------------------------------------------------------------

--4to SP

--4. Agregar un Empleado

CREATE OR REPLACE PROCEDURE agregarEmpleado(e_id_empleado IN INT, e_id_puesto IN NUMBER,
e_nombre IN VARCHAR2, e_apellido IN VARCHAR2, e_fecha_contratacion IN DATE)
AS
    v_contadorE INT;
BEGIN
    SELECT COUNT(*) INTO v_contadorE
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
    IF v_contadorE > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El Empleado con ID: '|| e_id_empleado || ' ya existe, cambie el valor');
    ELSE
        INSERT INTO EMPLEADO(id_empleado, id_puesto, nombre,apellido,fecha_contratacion)
        VALUES(e_id_empleado, e_id_puesto, e_nombre, e_apellido, e_fecha_contratacion);
    
            DBMS_OUTPUT.PUT_LINE('Nuevo Empleado agregado correctamente: '|| e_nombre || ' ' || e_apellido);
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');
END;

--Ejecucion SP Agregar Empleado
EXEC agregarEmpleado(6, 2,'Ejemplo','Torres Pérez', TO_DATE('2024-11-16', 'YYYY-MM-DD'));
--Cambiar este exec para agregar cualquier empleado, si no cambia el ID, sale error
SELECT * FROM EMPLEADO;
-----------------------------------------------------------------------------

--5to SP

--5. Actualizar Empleado

CREATE OR REPLACE PROCEDURE actualizarEmpleadoExistente(e_id_empleado IN INT,e_id_puesto IN NUMBER,
e_nombre IN VARCHAR2, e_apellido IN VARCHAR2, e_fecha_contratacion IN DATE)
AS
    v_verificar INT;--verificacion del ID
BEGIN

    --Verificar el ID, si no existe salta error
    SELECT id_empleado INTO v_verificar
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
    UPDATE EMPLEADO
    SET nombre = e_nombre,
    id_puesto = e_id_puesto,
    apellido = e_apellido,
    fecha_contratacion = e_fecha_contratacion
    WHERE id_empleado = e_id_empleado;
    
    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente: '|| e_nombre || ' ' || e_apellido);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error, el Empleado con ID: '|| e_id_empleado || ' no existe');
END;

--Ejecucion SP Agregar Cliente Existente

EXEC actualizarEmpleadoExistente(6,2,'Alexis','Torres Calderón', TO_DATE('2024-11-14', 'YYYY-MM-DD'));

SELECT * FROM EMPLEADO;   
-----------------------------------------------------------------------------

--6to SP

--6. Eliminar Empleado

CREATE OR REPLACE PROCEDURE eliminarEmpleado(e_id_empleado IN INT)
AS
    v_verificarE INT;--Verificar el ID para eliminar
BEGIN
    SELECT id_empleado INTO v_verificarE
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
        
    DELETE FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
        DBMS_OUTPUT.PUT_LINE('EliminaciÃ³n de Empleado correctamente, el ID es: ' || e_id_empleado);

EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');  
END;

--Ejecucion SP Eliminar Empleado
EXEC eliminarEmpleado(6);

SELECT * FROM EMPLEADO;
-----------------------------------------------------------------------------

--7 SP

-- CONSULTAR LOS EMPLEADOS POR EL PUESTO  

CREATE OR REPLACE PROCEDURE ConsultarEmpleadosPorPuesto(p_id_puesto IN puesto.id_puesto%TYPE)
IS
BEGIN
    FOR r IN (
        SELECT e.id_empleado, e.nombre, e.apellido, e.fecha_contratacion, p.descripcion
        FROM empleado e
        JOIN puesto p ON e.id_puesto = p.id_puesto
        WHERE e.id_puesto = p_id_puesto
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || r.id_empleado || ', Nombre: ' || r.nombre || ', Apellido: ' || r.apellido || ', Fecha Contratacion: ' || r.fecha_contratacion || ', Puesto: ' || r.descripcion);
    END LOOP;
END ConsultarEmpleadosPorPuesto;

-- EJECUCION
EXECUTE ConsultarEmpleadosPorPuesto(1);

-----------------------------------------------------------------------------

--8 SP

-- Agregar un nuevo hotel 

CREATE OR REPLACE PROCEDURE AgregarHotel( 
    p_id_hotel IN hotel.id_hotel%TYPE,
    p_nombre IN hotel.nombre%TYPE,
    p_direccion IN hotel.direccion%TYPE,
    p_telefono IN hotel.telefono%TYPE
)
IS
    v_count NUMBER; 
BEGIN

    SELECT COUNT(*)
    INTO v_count
    FROM hotel
    WHERE id_hotel = p_id_hotel;

    IF v_count > 0 THEN
        
        DBMS_OUTPUT.PUT_LINE('El ID del hotel ya existe en la tabla.');
    ELSE
        
        INSERT INTO hotel (id_hotel, nombre, direccion, telefono)
        VALUES (p_id_hotel, p_nombre, p_direccion, p_telefono);
    END IF;
END AgregarHotel;

BEGIN
    AgregarHotel(2, 'Hotel Barcelo', 'Jaco',  '89898989');
END;

SELECT * FROM HOTEL;
-----------------------------------------------------------------------------

--9 SP

-- Actualizar los datos del hotel

CREATE OR REPLACE PROCEDURE ActualizarHotel(
    p_id_hotel IN hotel.id_hotel%TYPE,
    p_nombre IN hotel.nombre%TYPE,
    p_direccion IN hotel.direccion%TYPE,
    p_telefono IN hotel.telefono%TYPE
)
IS
BEGIN
    UPDATE hotel
    SET nombre = p_nombre, direccion = p_direccion, telefono = p_telefono
    WHERE id_hotel = p_id_hotel;
    
END ActualizarHotel;

BEGIN
    ActualizarHotel(2, 'Hotel Barcelo', 'Guanacaste', '89898989');
END;

SELECT * FROM Hotel;

-----------------------------------------------------------------------------

--10 SP

-- Eliminar un hotel

CREATE OR REPLACE PROCEDURE EliminarHotel(p_id_hotel IN hotel.id_hotel%TYPE)
IS
BEGIN
    DELETE FROM hotel WHERE id_hotel = p_id_hotel;
END EliminarHotel;

BEGIN
    EliminarHotel(2);
end;

select * from HOTEL;

-----------------------------------------------------------------------------

--11 SP

--  Agregar un nuevo proveedor 

CREATE OR REPLACE PROCEDURE AgregarProveedor(
    p_id_proveedor IN proveedor.id_proveedor%TYPE,
    p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,
    p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,
    p_id_hotel IN proveedor.id_hotel%TYPE
)
IS
BEGIN
    INSERT INTO proveedor (id_proveedor, nombre, telefono, direccion, email, id_hotel)
    VALUES (p_id_proveedor, p_nombre, p_telefono, p_direccion, p_email, p_id_hotel);
END AgregarProveedor;

BEGIN
    AgregarProveedor(3, 'Limpieza Eficaz11', '67676767', 'San Jose', 'limpieza@gmail.com',1);
END;

SELECT * FROM Proveedor;
-----------------------------------------------------------------------------

--12 SP

--  Actualizar el proveedor 

CREATE OR REPLACE PROCEDURE ActualizarProveedor(
    p_id_proveedor IN proveedor.id_proveedor%TYPE,
    p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,
    p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,
    p_id_hotel IN proveedor.id_hotel%TYPE
)
IS
BEGIN
    UPDATE proveedor
    SET nombre = p_nombre, telefono = p_telefono, direccion = p_direccion, email = p_email, id_hotel = p_id_hotel
    WHERE id_proveedor = p_id_proveedor;
END ActualizarProveedor;

BEGIN
    ActualizarProveedor(2, 'Limpieza Eficaz 2', '80808080', 'SAN JOSE', 'limpieza@gmail.com', 1);
END;

SELECT * FROM PROVEEDOR;
-----------------------------------------------------------------------------

--13 SP

--  Eliminar el proveedor 

CREATE OR REPLACE PROCEDURE EliminarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE)
IS
BEGIN
    DELETE FROM proveedor WHERE id_proveedor = p_id_proveedor;
END EliminarProveedor;

BEGIN
    EliminarProveedor(2);
END;

SELECT * FROM PROVEEDOR;

-----------------------------------------------------------------------------

--14 SP

--  Agregar un nuevo suministro

CREATE OR REPLACE PROCEDURE AgregarSuministro(
    p_id_suministro IN suministro.id_suministro%TYPE,
    p_nombre IN suministro.nombre%TYPE,
    p_descripcion IN suministro.descripcion%TYPE,
    p_cantidad IN suministro.cantidad%TYPE,
    p_precio_unitario IN suministro.precio_unitario%TYPE,
    p_id_proveedor IN suministro.id_proveedor%TYPE,
    p_id_hotel IN suministro.id_hotel%TYPE
)
IS
BEGIN
    INSERT INTO suministro (id_suministro, nombre, descripcion, cantidad, precio_unitario, id_proveedor, id_hotel)
    VALUES (p_id_suministro, p_nombre, p_descripcion, p_cantidad, p_precio_unitario, p_id_proveedor, p_id_hotel);
END AgregarSuministro;

BEGIN 
    AgregarSuministro(2, 'Cloro ', 'Cloro 95%', 100, 750, 1,1);
END;


SELECT * FROM Suministro;

-----------------------------------------------------------------------------

--15 SP

--  Actualizar un suministro

CREATE OR REPLACE PROCEDURE ActualizarSuministro(
    p_id_suministro IN suministro.id_suministro%TYPE,
    p_nombre IN suministro.nombre%TYPE,
    p_descripcion IN suministro.descripcion%TYPE,
    p_cantidad IN suministro.cantidad%TYPE,
    p_precio_unitario IN suministro.precio_unitario%TYPE,
    p_id_proveedor IN suministro.id_proveedor%TYPE,
    p_id_hotel IN suministro.id_hotel%TYPE
)
IS
BEGIN
    UPDATE suministro
    SET nombre = p_nombre, descripcion = p_descripcion, cantidad = p_cantidad, precio_unitario = p_precio_unitario, id_proveedor = p_id_proveedor, id_hotel = p_id_hotel
    WHERE id_suministro = p_id_suministro;
END ActualizarSuministro;

BEGIN 
    ActualizarSuministro(2, 'Cloro ', 'Cloro 99%', 100, 750, 1,1);
END;

SELECT * FROM Suministro;

-----------------------------------------------------------------------------

--16 SP

--  Agregar una nueva habitacion 

CREATE OR REPLACE PROCEDURE AgregarHabitacion(
    p_id_habitacion IN habitacion.id_habitacion%TYPE,
    p_tipo_habitacion IN habitacion.tipo_habitacion%TYPE,
    p_precio IN habitacion.precio%TYPE,
    p_capacidad IN habitacion.capacidad%TYPE,
    p_disponibilidad IN habitacion.disponibilidad%TYPE
)
IS
BEGIN
    INSERT INTO habitacion (id_habitacion, tipo_habitacion, precio, capacidad, disponibilidad)
    VALUES (p_id_habitacion, p_tipo_habitacion, p_precio, p_capacidad, p_disponibilidad);
END AgregarHabitacion;

BEGIN 
    AgregarHabitacion(2, 'Sencilla', 25000,1,1);
END;


SELECT * FROM Habitacion;
-----------------------------------------------------------------------------

--17 SP

--  Modificar habitacion 

CREATE OR REPLACE PROCEDURE ActualizarHabitacion(
    p_id_habitacion IN habitacion.id_habitacion%TYPE,
    p_tipo_habitacion IN habitacion.tipo_habitacion%TYPE,
    p_precio IN habitacion.precio%TYPE,
    p_capacidad IN habitacion.capacidad%TYPE,
    p_disponibilidad IN habitacion.disponibilidad%TYPE
)
IS
BEGIN
    UPDATE habitacion
    SET tipo_habitacion = p_tipo_habitacion,
        precio = p_precio,
        capacidad = p_capacidad,
        disponibilidad = p_disponibilidad
    WHERE id_habitacion = p_id_habitacion;
END ActualizarHabitacion;

BEGIN
    ActualizarHabitacion(2, 'Doble', 50000, 2,0);
END;

SELECT * FROM Habitacion;
-----------------------------------------------------------------------------

--18 SP

--  Eliminar habitacion 

CREATE OR REPLACE PROCEDURE EliminarHabitacion(
    p_id_habitacion IN habitacion.id_habitacion%TYPE
)
IS
BEGIN
    DELETE FROM habitacion WHERE id_habitacion = p_id_habitacion;
END EliminarHabitacion;

BEGIN
    EliminarHabitacion(2);
END;

select * from habitacion;

-----------------------------------------------------------------------------
--19 SP

--  Cancelar una reserva 

CREATE OR REPLACE PROCEDURE CancelarReserva(
    p_id_reserva IN reserva.id_reserva%TYPE
)
IS
BEGIN
    UPDATE reserva
    SET estado_reserva = 'Cancelada'
    WHERE id_reserva = p_id_reserva;
END CancelarReserva;

BEGIN
    CancelarReserva(6);
END;

SELECT * FROM reserva;
-----------------------------------------------------------------------------
--20 SP
SET SERVEROUTPUT ON;
--  Reservas activas

CREATE OR REPLACE PROCEDURE ConsultarReservasActivasPorCliente(
    p_id_cliente IN reserva.id_cliente%TYPE,
    cur_reservas OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN cur_reservas FOR
        SELECT id_reserva, fecha_inicio, fecha_fin, estado_reserva, id_habitacion
        FROM reserva
        WHERE id_cliente = p_id_cliente
          AND estado_reserva = 'Activa';
END ConsultarReservasActivasPorCliente;

DECLARE
    cur_reservas SYS_REFCURSOR;
    v_id_reserva reserva.id_reserva%TYPE;
    v_fecha_inicio reserva.fecha_inicio%TYPE;
    v_fecha_fin reserva.fecha_fin%TYPE;
    v_estado_reserva reserva.estado_reserva%TYPE;
    v_id_habitacion reserva.id_habitacion%TYPE;
BEGIN
    -- Llamar al procedimiento
    ConsultarReservasActivasPorCliente(1, cur_reservas);

    -- Procesar los resultados del cursor
    LOOP
        FETCH cur_reservas INTO v_id_reserva, v_fecha_inicio, v_fecha_fin, v_estado_reserva, v_id_habitacion;
        EXIT WHEN cur_reservas%NOTFOUND;

        -- Mostrar resultados
        DBMS_OUTPUT.PUT_LINE('ID Reserva: ' || v_id_reserva || 
                             ', Fecha Inicio: ' || v_fecha_inicio || 
                             ', Fecha Fin: ' || v_fecha_fin || 
                             ', Estado: ' || v_estado_reserva || 
                             ', ID Habitacion: ' || v_id_habitacion);
    END LOOP;

    -- Cerrar el cursor
    CLOSE cur_reservas;
END;
-----------------------------------------------------------------------------

--21 SP

--  Consultar pagos por reserva 

CREATE OR REPLACE PROCEDURE ConsultarPagosPorReserva(
    p_id_reserva IN pago.id_reserva%TYPE
)
IS
BEGIN
    FOR r IN (
        SELECT id_pago, monto, fecha_pago, metodo_pago, id_factura
        FROM pago
        WHERE id_reserva = p_id_reserva
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID Pago: ' || r.id_pago || ', Monto: ' || r.monto || ', Fecha Pago: ' || r.fecha_pago || ', Metodo Pago: ' || r.metodo_pago || ', ID Factura: ' || r.id_factura);
    END LOOP;
END ConsultarPagosPorReserva;

BEGIN
    ConsultarPagosPorReserva(1);
END;

-----------------------------------------------------------------------------
--22 SP

--  Consultar todos los pagos


CREATE OR REPLACE PROCEDURE ConsultarTodosLosPagos
IS
BEGIN
    FOR r IN (
        SELECT id_pago, id_reserva, monto, fecha_pago, metodo_pago, id_factura
        FROM pago
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID Pago: ' || r.id_pago || ', ID Reserva: ' || r.id_reserva || ', Monto: ' || r.monto || ', Fecha Pago: ' || r.fecha_pago || ', Metodo Pago: ' || r.metodo_pago || ', ID Factura: ' || r.id_factura);
    END LOOP;
END ConsultarTodosLosPagos;

BEGIN
    ConsultarTodosLosPagos();
END;
-----------------------------------------------------------------------------

--23 SP

--Agregar una reserva

CREATE OR REPLACE PROCEDURE AgregarReserva(
    p_id_reserva IN reserva.id_reserva%TYPE,
    p_id_cliente IN reserva.id_cliente%TYPE,
    p_id_hotel IN reserva.id_hotel%TYPE,
    p_fecha_inicio IN reserva.fecha_inicio%TYPE,
    p_fecha_fin IN reserva.fecha_fin%TYPE,
    p_estado_reserva IN reserva.estado_reserva%TYPE,
    p_id_habitacion IN reserva.id_habitacion%TYPE
)
IS
BEGIN
    INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, estado_reserva, id_habitacion)
    VALUES (p_id_reserva, p_id_cliente, p_id_hotel, p_fecha_inicio, p_fecha_fin, p_estado_reserva, p_id_habitacion);
END AgregarReserva;

BEGIN
    AgregarReserva( 6,5, 1, TO_DATE('2024-12-20', 'YYYY-MM-DD'),TO_DATE('2024-12-25', 'YYYY-MM-DD'), 'Confirmada',1);
END;

SELECT * from reserva;
-----------------------------------------------------------------------------

--24 SP

--Actualizar fechas de una reserva

CREATE OR REPLACE PROCEDURE ActualizarFechasReserva(
    p_id_reserva IN reserva.id_reserva%TYPE,
    p_nueva_fecha_inicio IN reserva.fecha_inicio%TYPE,
    p_nueva_fecha_fin IN reserva.fecha_fin%TYPE
)
IS
    v_id_habitacion reserva.id_habitacion%TYPE;
    v_habitacion_ocupada NUMBER;
BEGIN
   
    SELECT id_habitacion
    INTO v_id_habitacion
    FROM reserva
    WHERE id_reserva = p_id_reserva;

    SELECT COUNT(*)
    INTO v_habitacion_ocupada
    FROM reserva
    WHERE id_habitacion = v_id_habitacion
      AND id_reserva != p_id_reserva
      AND estado_reserva = 'Activa'
      AND (
           (p_nueva_fecha_inicio BETWEEN fecha_inicio AND fecha_fin) OR
           (p_nueva_fecha_fin BETWEEN fecha_inicio AND fecha_fin) OR
           (p_nueva_fecha_inicio < fecha_inicio AND p_nueva_fecha_fin > fecha_fin)
      );

    IF v_habitacion_ocupada > 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'La habitación no está disponible en las nuevas fechas.');
    END IF;

  
    UPDATE reserva
    SET fecha_inicio = p_nueva_fecha_inicio,
        fecha_fin = p_nueva_fecha_fin
    WHERE id_reserva = p_id_reserva;

    DBMS_OUTPUT.PUT_LINE('Fechas de reserva actualizadas exitosamente.');
END ActualizarFechasReserva;
--
BEGIN
    ActualizarFechasReserva( 6, 
        TO_DATE('2025-12-22', 'YYYY-MM-DD'), 
        TO_DATE('2025-12-26', 'YYYY-MM-DD')  );

END;

SELECT * FROM RESERVA;
-----------------------------------------------------------------------------

--25 SP

--  ELIMINAR PROVEEDOR 

CREATE OR REPLACE PROCEDURE EliminarProveedor(
    p_id_proveedor IN proveedor.id_proveedor%TYPE
)
IS
    v_count NUMBER;
BEGIN
    
    SELECT COUNT(*) 
    INTO v_count 
    FROM proveedor 
    WHERE id_proveedor = p_id_proveedor;

    IF v_count = 0 THEN
      
        RAISE_APPLICATION_ERROR(-20001, 'El proveedor no existe.');
    ELSE
        
        DELETE FROM proveedor
        WHERE id_proveedor = p_id_proveedor;

        
        DBMS_OUTPUT.PUT_LINE('Proveedor con ID ' || p_id_proveedor || ' eliminado exitosamente.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END EliminarProveedor;
--
BEGIN
    EliminarProveedor(3);
END;

SELECT * FROM Proveedor;

-----------------------------------------------------------------------------
--1. Vista clientes registrados
CREATE VIEW vista_clientesRegistrados 
AS SELECT id_cliente, nombre, apellido1, apellido2
FROM CLIENTE;

--Para visualizar la vista
SELECT * FROM vista_clientesRegistrados;
-----------------------------------------------------------------------------

--2da Vista

--2. Vista ubicaciones del cliente 
CREATE VIEW vista_direccionClientes 
AS SELECT id_cliente, direccion
FROM CLIENTE;

--Para visualizar la 2da vista
SELECT * FROM vista_direccionClientes;
----------------------------------------------------------------------------

--3era Vista

--3. Vista empleado registrados
CREATE VIEW vista_empleadosRegistrados
AS SELECT id_empleado, nombre, apellido
FROM EMPLEADO;

--Para ver la visualizar la 3era vista
SELECT * FROM vista_empleadosRegistrados;
----------------------------------------------------------------------------

-- Vista 4

--4. Habitaciones Disponibles 
CREATE VIEW vista_habitaciones_disponibles AS
SELECT id_habitacion, tipo_habitacion, precio, capacidad
FROM habitacion
WHERE disponibilidad = 1;


--Para ver la visualizar la vista 4
SELECT * FROM vista_habitaciones_disponibles;
----------------------------------------------------------------------------

-- Vista 5

--5. Proveedores por hotel
CREATE VIEW vista_proveedores_por_hotel AS
SELECT h.nombre AS hotel, p.nombre AS proveedor, p.telefono, p.email
FROM proveedor p
JOIN hotel h ON p.id_hotel = h.id_hotel;

--Para ver la visualizar la vista 5
SELECT * FROM vista_proveedores_por_hotel;
----------------------------------------------------------------------------

-- Vista 6

--6. Suministros por hotel
CREATE VIEW vista_suministros_por_hotel AS
SELECT h.nombre AS hotel, s.nombre AS proveedor, s.cantidad
FROM suministro s
JOIN hotel h ON s.id_hotel = h.id_hotel;

--Para ver la visualizar la vista 5
SELECT * FROM vista_suministros_por_hotel;
----------------------------------------------------------------------------

-- Vista 7

--7. Historial de los pagos por cliente

CREATE VIEW vista_historial_pagos_cliente AS
SELECT p.id_pago, c.nombre, c.apellido1, r.id_reserva, p.monto, p.fecha_pago
FROM cliente c
JOIN reserva r ON c.id_cliente = r.id_cliente
JOIN pago p ON r.id_reserva = p.id_reserva;


SELECT * FROM vista_historial_pagos_cliente;

----------------------------------------------------------------------------

-- Vista 8

--8. Reservas por fechas inicio/fin - CLIENTE-HOTEL-RESERVA

CREATE VIEW vista_reservas_por_fecha AS
SELECT r.id_reserva, c.nombre AS cliente, h.nombre AS hotel, r.fecha_inicio, r.fecha_fin, r.estado_reserva
FROM reserva r
JOIN cliente c ON r.id_cliente = c.id_cliente
JOIN hotel h ON r.id_hotel = h.id_hotel;

SELECT * FROM vista_reservas_por_fecha;
    

----------------------------------------------------------------------------

-- Vista 9

--9. Reservas al restaurante

CREATE VIEW vista_reservas_restaurante AS
SELECT r.nombre AS nombre_restaurante, h.nombre AS nombre_hotel
FROM restaurante r
JOIN hotel h ON h.id_hotel = r.id_hotel;

SELECT * FROM vista_reservas_restaurante;
    
----------------------------------------------------------------------------

-- Vista 10

--10. Facturas por fecha

CREATE VIEW vista_facturas_por_fecha AS
SELECT id_factura, id_reserva, fecha_emision, monto_total
FROM factura
WHERE fecha_emision = TO_DATE('&fecha', 'DD/MM/YYYY');

SELECT * FROM vista_facturas_por_fecha;


------------------ FUNCIONES ----------------------------

---- 1- Numero de reservas por clientes 

CREATE OR REPLACE FUNCTION reservas_por_cliente(v_id_cliente IN NUMBER)
RETURN NUMBER
IS
    total_reservas NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO total_reservas
    FROM RESERVA
    WHERE id_cliente = v_id_cliente;
    
    RETURN total_reservas;
END;
--Ej
SELECT reservas_por_cliente(5)
FROM DUAL;

---- 2- obtener el # de clientes que han hecho reservas
----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION contar_ClientesReservas
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(DISTINCT id_cliente)
    INTO valor
    FROM RESERVA;
    
    RETURN valor;
END;
--Ej
SELECT contar_ClientesReservas()
FROM DUAL;
-----------------------------------------------------------------------------

-- 3- Contar puestos_empleados

CREATE OR REPLACE FUNCTION contar_Puestos
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO valor
    FROM PUESTO;
    
    RETURN valor;
END;
--Ej
SELECT contar_puestos AS Total_Puestos
FROM DUAL;
-----------------------------------------------------------------------------
-- 4-Contar Empleados

CREATE OR REPLACE FUNCTION contar_Empleados
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO valor 
    FROM EMPLEADO;
    
    RETURN valor;
END;
--Ej
SELECT contar_Empleados AS Total_Empleados
FROM DUAL;
----------------------------------------------------------------------------
--5-Contar Facturas

CREATE OR REPLACE FUNCTION contar_Facturas
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO valor
    FROM FACTURA;
    
    RETURN valor;
END;
--Ej
SELECT contar_Facturas AS Total_Facturas
FROM DUAL;

--6- Salario promedio del puesto

CREATE OR REPLACE FUNCTION salario_Promedio
RETURN NUMBER
IS
    valor_promedio NUMBER(10,2);
BEGIN
    SELECT AVG(SALARIO)
    INTO valor_promedio
    FROM PUESTO;
    
    RETURN valor_promedio;
END;
--Ej
SELECT salario_Promedio AS Salario_Promedio
FROM DUAL;

--7- contar Servicio Adicionales por reserva

CREATE OR REPLACE FUNCTION contar_ServiciosAdicionales
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO valor
    FROM SERVICIO_ADICIONAL;
    
    RETURN valor;
END;
--Ej
SELECT contar_ServiciosAdicionales() 
FROM DUAL;

--8- Contar Reservas

CREATE OR REPLACE FUNCTION contar_Reservas
RETURN NUMBER
IS
    valor NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO valor
    FROM RESERVA;
    
    RETURN valor;
END;
--Ej
SELECT contar_Reservas() 
FROM DUAL;

--9- Suma total de los servicios adicionales

CREATE OR REPLACE FUNCTION total_ServiciosAdicionales
RETURN DECIMAL
IS
    total_se DECIMAL(10,2);
BEGIN
    SELECT SUM(PRECIO)
    INTO total_se
    FROM SERVICIO_ADICIONAL;
    
    RETURN total_se;
END;
--Ej
SELECT total_ServiciosAdicionales()
FROM DUAL;


--10- Obtener el promedio del precio de los servicios adicionales

CREATE OR REPLACE FUNCTION promedio_ServiciosAdicionales
RETURN DECIMAL
IS
    promedio_se DECIMAL(10,2);
BEGIN
    SELECT AVG(PRECIO)
    INTO promedio_se
    FROM SERVICIO_ADICIONAL;
    
    RETURN promedio_se;
END;
--Ej
SELECT promedio_ServiciosAdicionales()
FROM DUAL;

--11 Obtener los comentarios de una reserva

CREATE OR REPLACE FUNCTION contar_ComentariosReserva (v_id_reserva IN INT)
RETURN NUMBER
IS
     total_comen NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO total_comen
    FROM COMENTARIO
    WHERE id_reserva = v_id_reserva;
    
    RETURN total_comen;
END;
--Ej
SELECT contar_ComentariosReserva(1)
FROM DUAL;



--12 Obtener el servicio adicional más caro

CREATE OR REPLACE FUNCTION servicio_MasCaro
RETURN VARCHAR2
IS
    descrip_servicio VARCHAR2(250);
BEGIN
    SELECT DESCRIPCION
    INTO descrip_servicio
    FROM SERVICIO_ADICIONAL
    WHERE PRECIO = (SELECT MAX(PRECIO)
    FROM SERVICIO_ADICIONAL);
    
    RETURN descrip_servicio;
END;
--Ej
SELECT servicio_MasCaro()
FROM DUAL;

--13 -Verificar si una reserva tiene comentarios

CREATE OR REPLACE FUNCTION verificar_Comentarios(v_id_reserva IN INT)
RETURN VARCHAR2
IS
    verificar_comen VARCHAR2(2);
BEGIN
    SELECT CASE WHEN COUNT(*) > 0 THEN 'SI' ELSE 'NO' END
    INTO verificar_comen
    FROM COMENTARIO
    WHERE id_reserva = v_id_reserva;
    
    RETURN verificar_comen;
END;
--Ej
SELECT verificar_Comentarios(1)
FROM DUAL;


--- 14 Total de los ingresos por reserva

CREATE OR REPLACE FUNCTION total_ingresos_reservas
RETURN NUMBER
IS
    ingresos_totales NUMBER(10, 2);
BEGIN
    SELECT SUM(MONTO_TOTAL)
    INTO ingresos_totales
    FROM factura;
    
    RETURN ingresos_totales;
END;

SELECT total_ingresos_reservas() AS Total_Ingresos
FROM DUAL;


--15 Duracion promedio de las reservas

CREATE OR REPLACE FUNCTION duracion_promedio_reservas
RETURN NUMBER
IS
    promedio_duracion NUMBER;
BEGIN
    SELECT AVG(fecha_fin - fecha_inicio)
    INTO promedio_duracion
    FROM reserva
    WHERE estado_reserva = 'Activa';
    
    RETURN promedio_duracion;
END;

-- Ejemplo de uso
SELECT duracion_promedio_reservas() AS Promedio_Dias
FROM DUAL;

------------------ PAQUETES ----------------------------

--1 Paquete gestion_clientes_paquete

CREATE OR REPLACE PACKAGE gestion_clientes_paquete
IS
    PROCEDURE agregarCliente(c_id_cliente IN INT,c_nombre IN VARCHAR2,c_apellido1 IN VARCHAR2,
    c_apellido2 IN VARCHAR2,c_email IN VARCHAR2,c_telefono IN VARCHAR2,c_direccion IN VARCHAR2);
    
END gestion_clientes_paquete;
--Body paquete

CREATE OR REPLACE PACKAGE BODY gestion_clientes_paquete
IS
    PROCEDURE agregarCliente(c_id_cliente IN INT,c_nombre IN VARCHAR2,c_apellido1 IN VARCHAR2,
    c_apellido2 IN VARCHAR2,c_email IN VARCHAR2,c_telefono IN VARCHAR2,c_direccion IN VARCHAR2)
IS
    v_contador INT;
BEGIN
    SELECT COUNT(*) INTO v_contador
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
    IF v_contador > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El Cliente con ID: '|| c_id_cliente || ' ya existe, cambie el valor');
    ELSE
        INSERT INTO CLIENTE(id_cliente,nombre,apellido1,apellido2,email,telefono,direccion)
        VALUES(c_id_cliente, c_nombre, c_apellido1, c_apellido2, c_email, c_telefono, c_direccion);
    
            DBMS_OUTPUT.PUT_LINE('Nuevo Cliente agregado correctamente: '|| c_nombre || ' ' || c_apellido1 || ' ' || c_apellido2);
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');
        END agregarCliente;         
END gestion_clientes_paquete;
--Ej ejecucion
BEGIN
    gestion_clientes_paquete.agregarCliente(6, 'Ejemplo','Mora','Mora','Ej@gmail.com','22493041','Calle Leo, frente a Escuela G');
END;
----------------------------------------------------------------------------

--2 Paquete actualizar_Cliente

CREATE OR REPLACE PACKAGE actualizar_Cliente_paquete
IS
    PROCEDURE actualizarClienteExistente(c_id_cliente IN INT,c_nombre IN VARCHAR2,c_apellido1 IN VARCHAR2,
    c_apellido2 IN VARCHAR2,c_email IN VARCHAR2,c_telefono IN VARCHAR2,c_direccion IN VARCHAR2);
END actualizar_Cliente_paquete;
--Body

CREATE OR REPLACE PACKAGE BODY actualizar_Cliente_paquete
IS
    PROCEDURE actualizarClienteExistente(c_id_cliente IN INT,c_nombre IN VARCHAR2,c_apellido1 IN VARCHAR2,
    c_apellido2 IN VARCHAR2,c_email IN VARCHAR2,c_telefono IN VARCHAR2,c_direccion IN VARCHAR2)
IS
    v_verificar INT;--verificacion del ID
BEGIN

    --Verificar el ID, si no existe salta error
    SELECT id_cliente INTO v_verificar
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
    UPDATE CLIENTE
    SET nombre = c_nombre,
    apellido1 = c_apellido1,
    apellido2 = c_apellido2,
    email = c_email,
    telefono = c_telefono,
    direccion = c_direccion
    WHERE id_cliente = c_id_cliente;
    
    DBMS_OUTPUT.PUT_LINE('Cliente actualizado correctamente: '|| c_nombre || ' ' || c_apellido1 || ' ' || c_apellido2);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error, el Cliente con ID: '|| c_id_cliente || ' no existe');
    END actualizarClienteExistente;
END actualizar_Cliente_paquete;
--Ej ejecucion
BEGIN
    actualizar_Cliente_paquete.actualizarClienteExistente(2, 'Ana', 'López', 'Gonzales', 'ANA@gmail.com', '25407890', 'San José Centro');
END;
-----------------------------------------------------------------------------

--3. paquete eliminarCliente

CREATE OR REPLACE PACKAGE eliminar_Cliente_paquete
IS
    PROCEDURE eliminarCliente(c_id_cliente IN INT);
END eliminar_Cliente_paquete;
--Body

CREATE OR REPLACE PACKAGE BODY eliminar_Cliente_paquete
IS
    PROCEDURE eliminarCliente(c_id_cliente IN INT)
IS
    v_verificarE INT;--Verificar el ID para eliminar
BEGIN
    SELECT id_cliente INTO v_verificarE
    FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
        
    DELETE FROM CLIENTE
    WHERE id_cliente = c_id_cliente;
    
        DBMS_OUTPUT.PUT_LINE('Eliminación de Cliente correctamente, el ID es: ' || c_id_cliente);

EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');  
        END eliminarCliente;
END eliminar_Cliente_paquete;
---------------------------------------------------------------------------

--4. Paquete agregar_Empleado_paquete

CREATE OR REPLACE PACKAGE agregar_Empleado_paquete
IS
    PROCEDURE agregarEmpleado(e_id_empleado IN INT, e_nombre IN VARCHAR2, e_apellido
    IN VARCHAR2, e_fecha_contratacion IN DATE);
END agregar_Empleado_paquete;
--Body

CREATE OR REPLACE PACKAGE BODY agregar_Empleado_paquete
IS
    PROCEDURE agregarEmpleado(e_id_empleado IN INT, e_nombre IN VARCHAR2, e_apellido
    IN VARCHAR2, e_fecha_contratacion IN DATE)
IS
    v_contadorE INT;
BEGIN
    SELECT COUNT(*) INTO v_contadorE
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
    IF v_contadorE > 0 THEN
        DBMS_OUTPUT.PUT_LINE('El Empleado con ID: '|| e_id_empleado || ' ya existe, cambie el valor');
    ELSE
        INSERT INTO EMPLEADO(id_empleado,nombre,apellido,fecha_contratacion)
        VALUES(e_id_empleado, e_nombre, e_apellido, e_fecha_contratacion);
    
            DBMS_OUTPUT.PUT_LINE('Nuevo Empleado agregado correctamente: '|| e_nombre || ' ' || e_apellido);
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos');
        END agregarEmpleado;
END agregar_Empleado_paquete;
---------------------------------------------------------------------------

--5. Paquete actualizarEmpleadoExistente

CREATE OR REPLACE PACKAGE actualizar_Empleado_paquete
IS
    PROCEDURE actualizarEmpleadosExistente(e_id_empleado IN INT, e_nombre IN VARCHAR2, e_apellido
    IN VARCHAR2, e_fecha_contratacion IN DATE);
END actualizar_Empleado_paquete;

--Body

CREATE OR REPLACE PACKAGE BODY actualizar_Empleado_paquete
IS
    PROCEDURE actualizarEmpleadosExistente(e_id_empleado IN INT, e_nombre IN VARCHAR2, e_apellido
    IN VARCHAR2, e_fecha_contratacion IN DATE)
IS
    v_verificar INT;--verificacion del ID
BEGIN

    --Verificar el ID, si no existe salta error
    SELECT id_empleado INTO v_verificar
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
    UPDATE EMPLEADO
    SET nombre = e_nombre,
    apellido = e_apellido,
    fecha_contratacion = e_fecha_contratacion
    WHERE id_empleado = e_id_empleado;
    
    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente: '|| e_nombre || ' ' || e_apellido);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error, el Empleado con ID: '|| e_id_empleado || ' no existe');
        END actualizarEmpleadosExistente;
END actualizar_Empleado_paquete;
----------------------------------------------------------------------------

--6. Paquete eliminar_Empleado_paquete

CREATE OR REPLACE PACKAGE eliminar_Empleado_paquete
IS
    PROCEDURE eliminarEmpleado(e_id_empleado IN INT);
END eliminar_Empleado_paquete;

--BODY

CREATE OR REPLACE PACKAGE BODY eliminar_Empleado_paquete
IS 
    PROCEDURE eliminarEmpleado(e_id_empleado IN INT)
IS
    v_verificarE INT;--Verificar el ID para eliminar
BEGIN
    SELECT id_empleado INTO v_verificarE
    FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
        
    DELETE FROM EMPLEADO
    WHERE id_empleado = e_id_empleado;
    
        DBMS_OUTPUT.PUT_LINE('Eliminación de Empleado correctamente, el ID es: ' || e_id_empleado);

EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Se ha producido un error en los datos'); 
        END eliminarEmpleado;
END eliminar_Empleado_paquete;
---------------------------------------------------------------------------

--7. Paquete consultar_Empleados_paquete
CREATE OR REPLACE PACKAGE consultar_Empleados_paquete
IS
    PROCEDURE ConsultarEmpleadosPorPuesto(p_id_puesto IN puesto.id_puesto%TYPE);
END consultar_Empleados_paquete;

--Body

CREATE OR REPLACE PACKAGE BODY consultar_Empleados_paquete
IS
    PROCEDURE ConsultarEmpleadosPorPuesto(p_id_puesto IN puesto.id_puesto%TYPE)
IS
BEGIN
    FOR r IN (
        SELECT e.id_empleado, e.nombre, e.apellido, e.fecha_contratacion, p.descripcion
        FROM empleado e
        JOIN puesto p ON e.id_puesto = p.id_puesto
        WHERE e.id_puesto = p_id_puesto
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || r.id_empleado || ', Nombre: ' || r.nombre || ', Apellido: ' || r.apellido || ', Fecha Contratacion: ' || r.fecha_contratacion || ', Puesto: ' || r.descripcion);
    END LOOP;
    END ConsultarEmpleadosPorPuesto;
END consultar_Empleados_paquete;
----------------------------------------------------------------------------

--8. Paquete agregar_Proveedor_paquete

CREATE OR REPLACE PACKAGE agregar_Proveedor_paquete
IS
    PROCEDURE AgregarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE,p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,p_id_hotel IN proveedor.id_hotel%TYPE);
END agregar_Proveedor_paquete;

--Body

CREATE OR REPLACE PACKAGE BODY agregar_Proveedor_paquete
IS 
    PROCEDURE AgregarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE,p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,p_id_hotel IN proveedor.id_hotel%TYPE)
IS
BEGIN
    INSERT INTO proveedor (id_proveedor, nombre, telefono, direccion, email, id_hotel)
    VALUES (p_id_proveedor, p_nombre, p_telefono, p_direccion, p_email, p_id_hotel);
END AgregarProveedor;
END agregar_Proveedor_paquete;
--Ej ejecucion
BEGIN 
    agregar_Proveedor_paquete.AgregarProveedor(2,'Suministros Luna','22563010','Calle Bernald 22','luna@suministros.com',1);
END;
-----------------------------------------------------------------------------

--9. Paquete actualizar_Proveedor_paquete

CREATE OR REPLACE PACKAGE actualizar_Proveedor_paquete
IS
    PROCEDURE ActualizarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE,p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,p_id_hotel IN proveedor.id_hotel%TYPE);
END actualizar_Proveedor_paquete;

--Body

CREATE OR REPLACE PACKAGE BODY actualizar_Proveedor_paquete
IS
    PROCEDURE ActualizarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE,p_nombre IN proveedor.nombre%TYPE,
    p_telefono IN proveedor.telefono%TYPE,p_direccion IN proveedor.direccion%TYPE,
    p_email IN proveedor.email%TYPE,p_id_hotel IN proveedor.id_hotel%TYPE)
IS
BEGIN
    UPDATE proveedor
    SET nombre = p_nombre, telefono = p_telefono, direccion = p_direccion, email = p_email, id_hotel = p_id_hotel
    WHERE id_proveedor = p_id_proveedor;
END ActualizarProveedor;
END actualizar_Proveedor_paquete;
--Ej ejecución
BEGIN 
    actualizar_Proveedor_paquete.ActualizarProveedor(2,'Suministros Luna','22563010','Calle Bernald 23','luna@suministros.com',1);
END;
-----------------------------------------------------------------------------

--10. Paquete eliminar_Proveedor_paquete

CREATE OR REPLACE PACKAGE eliminar_Proveedor_paquete
IS
    PROCEDURE EliminarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE);
END eliminar_Proveedor_paquete;

--Body

CREATE OR REPLACE PACKAGE BODY eliminar_Proveedor_paquete
IS
    PROCEDURE EliminarProveedor(p_id_proveedor IN proveedor.id_proveedor%TYPE)
IS
BEGIN
    DELETE FROM proveedor WHERE id_proveedor = p_id_proveedor;
END EliminarProveedor;
END eliminar_Proveedor_paquete;
--Ej ejecución
BEGIN 
    eliminar_Proveedor_paquete.EliminarProveedor(2);
END;
----------------------------------------------------------------------------

------------------ Triggers ----------------------------
    
----- 1 Trigger


---creacion de la tabla de auditoria

CREATE TABLE auditoria_cliente (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY, 
    id_cliente NUMBER NOT NULL,                          
    nombre_anterior VARCHAR2(100),                      
    nombre_nuevo VARCHAR2(100),                         
    fecha_cambio DATE DEFAULT SYSDATE,                  
    PRIMARY KEY (id_auditoria)                          
);


CREATE OR REPLACE TRIGGER trgUpdateCliente
AFTER UPDATE ON cliente
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_cliente (id_cliente, nombre_anterior, nombre_nuevo, fecha_cambio)
    VALUES (:OLD.id_cliente, :OLD.nombre, :NEW.nombre, SYSDATE);
END;


---Prueba
--de Ana a Anastacia
UPDATE cliente
SET nombre = 'Anastacia'
WHERE id_cliente = 2;

SELECT * FROM auditoria_cliente;
SELECT * FROM CLIENTE;

--- 2 Trigger

CREATE OR REPLACE TRIGGER trgEmailDuplicados
BEFORE INSERT OR UPDATE ON cliente
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM cliente
    WHERE email = :NEW.email;
    
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El correo electrónico ya está registrado.');
    END IF;
END;


INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
    VALUES (2, 'Anastacia', 'López', 'Gonzales', 'ana@gmail.com', '25407890', 'San José Centro');

    
---- 3 trigger
--- TRigger para cuando se insertan clientes

CREATE TABLE auditoria_cliente_insert (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY,
    id_cliente NUMBER NOT NULL,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    email VARCHAR2(100),
    telefono VARCHAR2(15),
    direccion VARCHAR2(255),
    fecha_insert DATE DEFAULT SYSDATE,
    PRIMARY KEY (id_auditoria)
);

CREATE OR REPLACE TRIGGER trg_audit_cliente_insert
AFTER INSERT ON cliente
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_cliente_insert (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion)
    VALUES (:NEW.id_cliente, :NEW.nombre, :NEW.apellido1, :NEW.apellido2, :NEW.email, :NEW.telefono, :NEW.direccion);
    DBMS_OUTPUT.PUT_LINE('Auditoría: Inserción de cliente con ID ' || :NEW.id_cliente);
END;


INSERT INTO cliente (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion) 
    VALUES (6, 'Fabiola', 'Odio', 'Rodriguez', 'lola@gmail.com', '87878787', 'San José');
    
SELECT * FROM auditoria_cliente_insert;


---- 4 trigger
--- TRigger para cuando se insertan clientes_delete

CREATE TABLE auditoria_cliente_delete (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY,
    id_cliente NUMBER NOT NULL,
    nombre VARCHAR2(100),
    apellido1 VARCHAR2(100),
    apellido2 VARCHAR2(100),
    email VARCHAR2(100),
    telefono VARCHAR2(15),
    direccion VARCHAR2(255),
    fecha_delete DATE DEFAULT SYSDATE,
    PRIMARY KEY (id_auditoria)
);

CREATE OR REPLACE TRIGGER trg_audit_cliente_delete
AFTER DELETE ON cliente
FOR EACH ROW
BEGIN
    INSERT INTO auditoria_cliente_delete (id_cliente, nombre, apellido1, apellido2, email, telefono, direccion)
    VALUES (:OLD.id_cliente, :OLD.nombre, :OLD.apellido1, :OLD.apellido2, :OLD.email, :OLD.telefono, :OLD.direccion);
    DBMS_OUTPUT.PUT_LINE('Auditoría: Eliminación de cliente con ID ' || :OLD.id_cliente);
END;  

DELETE FROM CLIENTE
WHERE id_cliente = 6;

SELECT * FROM auditoria_cliente_delete;
select * from cliente;


----5  Valida las fechas de reserva 

CREATE OR REPLACE TRIGGER trg_validar_fecha_reserva
BEFORE INSERT ON reserva
FOR EACH ROW
BEGIN
    IF :NEW.fecha_inicio < SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'La fecha de la reserva no puede ser anterior a la fecha actual.');
    END IF;
END;


INSERT INTO reserva (id_reserva, id_cliente, id_hotel, fecha_inicio, fecha_fin, id_habitacion)
VALUES (3, 1, 1, SYSDATE - 1, SYSDATE + 10, 1);

select * from reserva ;


------------------------ CURSORES  ----------------------------

--- 1- Obtener todos los clientes


DECLARE
    CURSOR clientes IS
        SELECT id_cliente, nombre, apellido1, apellido2, email
        FROM cliente;
BEGIN
    FOR r_cliente IN clientes LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || r_cliente.nombre || ' ' || r_cliente.apellido1);
    END LOOP;
END;


---2 Habitaciones ocupadas de un hotel

DECLARE
    CURSOR habitaciones_ocupadas IS
        SELECT id_habitacion, tipo_habitacion
        FROM habitacion
        WHERE disponibilidad = 1 ;
BEGIN
    FOR r_habitacion IN habitaciones_ocupadas LOOP
        DBMS_OUTPUT.PUT_LINE('Habitación: ' || r_habitacion.id_habitacion || ' Tipo: ' || r_habitacion.tipo_habitacion);
    END LOOP;
END;


---- 3- Clientes que han reservado en el hotel 1

DECLARE
    CURSOR clientes_hotel IS
        SELECT DISTINCT c.id_cliente, c.nombre, c.apellido1
        FROM cliente c
        JOIN reserva r ON c.id_cliente = r.id_cliente
        WHERE r.id_hotel = 1;
BEGIN
    FOR r_cliente IN clientes_hotel LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || r_cliente.nombre || ' ' || r_cliente.apellido1);
    END LOOP;
END;


-- 4 Empleados con salaioros mayores a 1000 000

DECLARE
    CURSOR empleadosSalarios IS
        SELECT e.id_empleado, e.nombre, p.salario
        FROM empleado e
        JOIN puesto p ON e.id_puesto = p.id_puesto
        WHERE p.salario > 1000;
BEGIN
    FOR r_empleado IN empleadosSalarios LOOP
        DBMS_OUTPUT.PUT_LINE('Empleado: ' || r_empleado.nombre || ' Salario: ' || r_empleado.salario);
    END LOOP;
END;


-- 5-   Habitaciones reservadas por un cliente

DECLARE
    CURSOR habitaciones_cliente IS
        SELECT h.id_habitacion, h.tipo_habitacion
        FROM habitacion h
        JOIN reserva r ON h.id_habitacion = r.id_habitacion
        WHERE r.id_cliente = 1;
BEGIN
    FOR r_habitacion IN habitaciones_cliente LOOP
        DBMS_OUTPUT.PUT_LINE('Habitación: ' || r_habitacion.id_habitacion || ' Tipo: ' || r_habitacion.tipo_habitacion);
    END LOOP;
END;


----- 6- RESERVAS CANCELADAS

DECLARE
    CURSOR clientes_cancelados IS
        SELECT c.id_cliente, c.nombre, c.apellido1
        FROM cliente c
        JOIN reserva r ON c.id_cliente = r.id_cliente
        WHERE r.estado_reserva = 'Cancelada';
BEGIN
    FOR r_cliente IN clientes_cancelados LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || r_cliente.nombre || ' ' || r_cliente.apellido1);
    END LOOP;
END;

-- 7 - Reservaciones a los proximos 10 dias

DECLARE
    CURSOR reservaciones_proximas IS
        SELECT id_reserva, fecha_inicio
        FROM reserva
        WHERE fecha_inicio <= SYSDATE + 10;
BEGIN
    FOR r_reservacion IN reservaciones_proximas LOOP
        DBMS_OUTPUT.PUT_LINE('Reservación: ' || r_reservacion.id_reserva || ' ENTRADA: ' || r_reservacion.fecha_inicio);
    END LOOP;
END;

SELECT * FROM RESERVA;

----- 8 RESERVACIONES DEL DIA

DECLARE
    CURSOR reservaciones_hoy IS
        SELECT id_reserva, fecha_inicio
        FROM reserva
        WHERE fecha_inicio <= SYSDATE ;
BEGIN
    FOR r_reservacion IN reservaciones_hoy LOOP
        DBMS_OUTPUT.PUT_LINE('Reservaciones de hoy : ' || r_reservacion.id_reserva);
    END LOOP;
END;

----- 9 RESERVACIONES ACTIVAS

DECLARE
    CURSOR reservaciones_hoy IS
        SELECT id_reserva, fecha_inicio
        FROM reserva
        WHERE estado_reserva= 'Confirmada' ;
BEGIN
    FOR r_reservacion IN reservaciones_hoy LOOP
        DBMS_OUTPUT.PUT_LINE('Reservaciones confirmadas , ID : ' || r_reservacion.id_reserva);
    END LOOP;
END;

---- 10 SUMINISTROS CON MAS DE 100 UNIDADES

DECLARE
    CURSOR suministros_mayor_100 IS
        SELECT id_suministro, nombre, cantidad
        FROM suministro
        WHERE cantidad > 100;
BEGIN
    FOR r_suministro IN suministros_mayor_100 LOOP
        DBMS_OUTPUT.PUT_LINE('Suministro: ' || r_suministro.nombre || 
                             ', Cantidad: ' || r_suministro.cantidad);
    END LOOP;
END;

-- 11 - SUMINISTROS MENORES A 10

DECLARE
    CURSOR suministros_mayor_100 IS
        SELECT id_suministro, nombre, cantidad
        FROM suministro
        WHERE cantidad < 10;
BEGIN
    FOR r_suministro IN suministros_mayor_100 LOOP
        DBMS_OUTPUT.PUT_LINE('Suministro: ' || r_suministro.nombre || 
                             ', Cantidad: ' || r_suministro.cantidad);
    END LOOP;
END;

-- 12- Restaurantes con una capacidad mayor a 200

DECLARE
    
    CURSOR restaurantes_capacidad IS
        SELECT id_restaurante, nombre, tipo_cocina, capacidad
        FROM restaurante
        WHERE capacidad > 200;
BEGIN
  
    FOR r_restaurante IN restaurantes_capacidad LOOP
        DBMS_OUTPUT.PUT_LINE('Restaurante: ' || r_restaurante.nombre || 
                             ', Tipo Cocina: ' || r_restaurante.tipo_cocina ||
                             ', Capacidad: ' || r_restaurante.capacidad);
    END LOOP;
END;

--- 13 -- Restaurantes tipo de cocina India

DECLARE
    
    CURSOR restaurantesIndia IS
        SELECT id_restaurante, nombre, tipo_cocina, capacidad
        FROM restaurante
        WHERE tipo_cocina = 'India';
BEGIN
    FOR r_restaurante IN restaurantesIndia LOOP
        DBMS_OUTPUT.PUT_LINE('Restaurante: ' || r_restaurante.nombre || 
                             ', Tipo Cocina: ' || r_restaurante.tipo_cocina ||
                             ', Capacidad: ' || r_restaurante.capacidad);
    END LOOP;
END;


--- 14- Restaurate cocina Mediterranea

DECLARE
    
    CURSOR restauranteMediterranea IS
        SELECT id_restaurante, nombre, tipo_cocina, capacidad
        FROM restaurante
        WHERE tipo_cocina = 'Mediterranea';
BEGIN
    FOR r_restaurante IN restauranteMediterranea LOOP
        DBMS_OUTPUT.PUT_LINE('Restaurante: ' || r_restaurante.nombre || 
                             ', Tipo Cocina: ' || r_restaurante.tipo_cocina ||
                             ', Capacidad: ' || r_restaurante.capacidad);
    END LOOP;
END;



---15 Habitaciones con capacidad mayor a 5

DECLARE
    CURSOR habitaciones_capacidad IS
        SELECT id_habitacion, tipo_habitacion, precio
        FROM habitacion
        WHERE capacidad >5 ;  
BEGIN
    FOR r_habitacion IN habitaciones_capacidad LOOP
        DBMS_OUTPUT.PUT_LINE('Habitación: ' || r_habitacion.tipo_habitacion || 
                             ', Precio: ' || r_habitacion.precio);
    END LOOP;
END;

---16 Habitaciones con capacidad mayor a 10

DECLARE
    CURSOR habitaciones_capacidad IS
        SELECT id_habitacion, tipo_habitacion, precio
        FROM habitacion
        WHERE capacidad = 10;  
BEGIN
    FOR r_habitacion IN habitaciones_capacidad LOOP
        DBMS_OUTPUT.PUT_LINE('Habitación: ' || r_habitacion.tipo_habitacion || 
                             ', Precio: ' || r_habitacion.precio);
    END LOOP;
END;
--------


